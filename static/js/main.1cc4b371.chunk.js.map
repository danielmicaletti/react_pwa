{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ComponentErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","map","user","components_Card","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","data","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","ComponentErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cc4b371.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\n\treturn (\n\t\t<div className={'bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'}>\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconsole.log('CardList');\n\n\treturn (\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\trobots.map((user) => \n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={user.id} \n\t\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\t\temail={user.email} \n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\tconsole.log('SearchBox');\n\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\taria-label='search robots'\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', height: '500px '}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch(error, data) {\n\t\tconsole.log(error);\n\t\tconsole.log(data);\n\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tconst { hasError } = this.state;\n\n\n\t\treturn ( hasError ?\n\n\t\t\t\t\t<h1>Oooooops. That's not good</h1>\n\t\t\t\t:\n\t\t\t\t\tthis.props.children\n\t\t);\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn false;\n\t}\n\n\trender() {\n\t\tconsole.log('Header');\n\t\treturn <h1 className='f1'>RoboFriends</h1>\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ComponentErrorBoundary';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t};\n};\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t});\n\n\t\treturn ( isPending ?\n\n\t\t\t\t\t<h1> Loading Robots </h1>\n\t\t\t\t:\n\t\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\t\n\t\t);\n\t}\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCHFIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n\n\ttype: CHANGE_SEARCHFIELD,\n\tpayload: text\n\n});\n\nexport const requestRobots = () => (dispatch) => {\n\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n};","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCHFIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n\t\n\tsearchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\n\tswitch(action.type) {\n\n\t\tcase CHANGE_SEARCHFIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload })\n\n\t\tdefault:\n\t\t\treturn state;\n\t};\n};\n\nconst initialStateRobots = {\n\n\tisPending: false,\n\trobots: [],\n\terror: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\n\tswitch(action.type) {\n\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\n\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\n\n\t\tdefault:\n\t\t\treturn state\n\t};\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\nReactDOM.render(\n\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}